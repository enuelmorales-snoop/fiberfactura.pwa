// Config standard
{
  "extends": "eslint:recommended",

  "parserOptions": {
        "ecmaVersion": 5
    },

  // http://eslint.org/docs/rules/
  "rules": {

        // ***************************    Best Practices

        // enforces getter/setter pairs in objects
        "accessor-pairs": "off",

        // enforces return statements in callbacks of array"s methods
        // http://eslint.org/docs/rules/array-callback-return
        // Sale un error; si da un falso positivo porque la regla revisa por nombre de método y no sabe si el receptor es o no un Array, anularla localmente en el código
        "array-callback-return": "error",
        // treat var statements as if they were block scoped
        // This is to help newcomers to the language avoid difficult bugs with variable hoisting.
        // http://eslint.org/docs/rules/block-scoped-var
        "block-scoped-var": "warn",

        // specify the maximum cyclomatic complexity allowed in a program
        "complexity": ["off", 11],
        // require return statements to either always or never specify values
        // off porque a veces hago early return
        "consistent-return" : "off",

        // specify curly brace conventions for all control statements
        "curly" : ["error", "all"],

        // Si ponemos  "// no default", no hay error
        "default-case": ["error", { "commentPattern": "^no default$" }],

        // enforces consistent newlines before or after dots
        // http://eslint.org/docs/rules/dot-location
        "dot-location": ["error", "property"],
        // encourages use of dot notation whenever possible, en vez de ['property']
        "dot-notation": ["error", { "allowKeywords": true }],
        "eqeqeq": ["error", "smart"],
        // make sure for-in loops have an if statement
        "guard-for-in": "error",
        // disallow the use of alert, confirm, and prompt
        "no-alert": "error",

        // disallow use of arguments.caller or arguments.callee
        "no-caller": "error",

        // disallow lexical declarations in case/default clauses
        // http://eslint.org/docs/rules/no-case-declarations.html
        "no-case-declarations": "error",
        // disallow division operators explicitly at beginning of regular expression
        // http://eslint.org/docs/rules/no-div-regex
        "no-div-regex": "off",
        // http://eslint.org/docs/rules/no-else-return
        // Error, xq este es error-prone
        "no-else-return": "error",

        // disallow empty functions, except for standalone funcs/arrows
        // http://eslint.org/docs/rules/no-empty-function
        "no-empty-function": ["error", {
          "allow": [
            "arrowFunctions",
            "functions",
            "methods"
          ]
        }],
        // disallow empty destructuring patterns
        // http://eslint.org/docs/rules/no-empty-pattern
        "no-empty-pattern": "error",
        // Comparing to null without a type-checking operator (== or !=), can have unintended results as
        // the comparison will evaluate to true when comparing to not just a null,
        // but also an undefined value.
        "no-eq-null": "error",

        // disallow use of eval()
        "no-eval": "error",

        // disallow adding to native types
        // Para polyfills, desactivarla en el archivo mismo
        "no-extend-native": "error",
        // disallow unnecessary function binding
        "no-extra-bind": "error",

        // disallow Unnecessary Labels
        // http://eslint.org/docs/rules/no-extra-label
        "no-extra-label": "error",
        // disallow fallthrough of case statements
        "no-fallthrough": "error",
        // disallow the use of leading or trailing decimal points in numeric literals
        "no-floating-decimal": "error",
        // Ataja errores como window = {}; length = 1; top = 1
        "no-global-assign": "error",

        // disallow implicit type conversions
        // http://eslint.org/docs/rules/no-implicit-coercion
        "no-implicit-coercion": ["off", {
          "boolean": false,
          "number": true,
          "string": true,
          "allow": []
        }],
        // No deja definir variables colgadas de window, fuerza a que la definición sea explícita o a poner otro contexto,
        // como por ejemplo un module o Angular Service/Factory
        "no-implicit-globals": "error",
        // disallow use of eval()-like methods ( pasar un String como primer argumento de setTimeout)
        "no-implied-eval": "error",
        // disallow this keywords outside of classes or class-like objects
        "no-invalid-this": "off",
        // No usar __iterator__
        "no-iterator": "error",

        // disallow use of labels for anything other then loops and switches
        "no-labels": ["error", { "allowLoop": false, "allowSwitch": false }],
        // disallow unnecessary nested blocks. No hacen nada realmente
        "no-lone-blocks": "error",
        // Estas funciones en general no andan como esperamos
        "no-loop-func": "error",

        // disallow magic numbers
        // http://eslint.org/docs/rules/no-magic-numbers
        "no-magic-numbers": ["off", {
          "ignore": [],
          "ignoreArrayIndexes": true,
          "enforceConst": false,
          "detectObjects": false
        }],
        // disallow use of multiple spaces
        // Tiene --fix
        "no-multi-spaces": "error",
        // disallow use of multiline strings
        // Concatenarlas
        "no-multi-str": "error",
        // disallow use of new operator when not part of the assignment or comparison
        "no-new": "error",

        // disallow use of new operator for Function object
        "no-new-func": "error",
        // disallows creating new instances of String, Number, and Boolean
        "no-new-wrappers": "error",

        // disallow use of (old style) octal literals
        "no-octal": "error",
        // disallow use of octal escape sequences in string literals, such as
        // var foo = "Copyright \251";
        "no-octal-escape": "error",
        // disallow reassignment of function parameters
        // Podemos tener una función que modifique una propiedad de un parámetro directamente;
        // por ejemplo porque en angular lo usamos para asignar al $scope,
        // Para otros casos, normalmente para modificar el parámetro le deberíamos enviar un mensaje no toquetearlo.
        // rule: http://eslint.org/docs/rules/no-param-reassign.html
        "no-param-reassign": ["error", { "props": false }],
        // No __proto__ here
        "no-proto": "error",

        // disallow declaring the same variable more then once
        "no-redeclare": "error",
        // disallow certain object properties
        // http://eslint.org/docs/rules/no-restricted-properties
        "no-restricted-properties": ["error", {
          "object": "arguments",
          "property": "callee",
          "message": "arguments.callee is deprecated,"
        }, {
          "object": "arguments",
          "property": "__defineGetter__",
          "message": "Please use Object.defineProperty instead."
        }, {
          "object": "arguments",
          "property": "__defineSetter__",
          "message": "Please use Object.defineProperty instead."
        }],
        // disallow use of assignment in return statement
        "no-return-assign": "error",
        // disallow use of `javascript:` urls.
        "no-script-url": "error",

        // disallow self assignment
        // http://eslint.org/docs/rules/no-self-assign
        "no-self-assign": "error",
        // disallow comparisons where both sides are exactly the same
        "no-self-compare": "error",
        // disallow use of comma operator
        // Oscurece el código
        "no-sequences": "error",

        // restrict what can be thrown as an exception
        // Solamente Objetos, idealmente un Error
        "no-throw-literal": "error",

        // disallow unmodified conditions of loops
        // http://eslint.org/docs/rules/no-unmodified-loop-condition
        "no-unmodified-loop-condition": "off",
        // disallow usage of expressions in statement position
        "no-unused-expressions": ["error", {
          "allowShortCircuit": true,
          "allowTernary": true
        }],
        // disallow unused labels
        // http://eslint.org/docs/rules/no-unused-labels
        "no-unused-labels": "error",
        // disallow unnecessary .call() and .apply()
        "no-useless-call": "warn",
        // disallow useless string concatenation
        // http://eslint.org/docs/rules/no-useless-concat
        "no-useless-concat": "warn",

        // disallow unnecessary string escaping
        // http://eslint.org/docs/rules/no-useless-escape
        "no-useless-escape": "error",
        // disallow use of void operator
        // http://eslint.org/docs/rules/no-void
        "no-void": "error",
        // disallow usage of configurable warning terms in comments: e.g. todo
        "no-warning-comments": ["off", { "terms": ["todo", "fixme", "xxx"], "location": "start" }],
        // disallow use of the with statement
        "no-with": "error",
        // require use of the second argument for parseInt()
        "radix": "error",
        // requires to declare all vars on top of their containing scope
        // OJO con hoisting
        // TODO habilitar
        "vars-on-top": "off",
        // require immediate function invocation to be wrapped in parentheses
        // http://eslint.org/docs/rules/wrap-iife.html
        "wrap-iife": ["warn", "outside"],
        // require or disallow Yoda conditions
        "yoda": "error",
        // ***************************  Possible Errors
        // disallow assignment in conditional expressions
        "no-cond-assign": ["error", "always"],
        // disallow use of console
        // off, porque lo necesitamos para debuggear; lo deberíamos eliminar cuando armamos los builds a prod.
        "no-console": ["off", { "allow": ["debug", "warn", "error"] }],
        // disallow use of constant expressions in conditions
        "no-constant-condition": "error",
        // disallow control characters in regular expressions
        "no-control-regex": "error",
        // disallow use of debugger
        "no-debugger": "error",
        // disallow duplicate arguments in functions
        "no-dupe-args": "error",
        // disallow duplicate keys when creating object literals
        "no-dupe-keys": "error",
        // disallow a duplicate case label.
        "no-duplicate-case": "error",
        // disallow empty statements
        "no-empty": "error",
        // disallow the use of empty character classes in regular expressions
        "no-empty-character-class": "error",
        // disallow assigning to the exception in a catch block
        "no-ex-assign": "error",
        // disallow double-negation boolean casts in a boolean context
        // http://eslint.org/docs/rules/no-extra-boolean-cast
        "no-extra-boolean-cast": "error",
        // disallow unnecessary parentheses
        // http://eslint.org/docs/rules/no-extra-parens
        "no-extra-parens": ["off", "all", {
          "conditionalAssign": true,
          "nestedBinaryExpressions": false,
          "returnAssign": false
        }],
        // disallow unnecessary semicolons
        // Tiene --fix
        "no-extra-semi": "error",
        // disallow overwriting functions written as function declarations
        "no-func-assign": "error",
        // disallow function or variable declarations in nested blocks
        "no-inner-declarations": "error",
        // disallow invalid regular expression strings in the RegExp constructor
        "no-invalid-regexp": "error",
        // disallow irregular whitespace outside of strings and comments
        // Sin caracteres "raros"
        "no-irregular-whitespace": "error",
        // disallow the use of object properties of the global object (Math and JSON) as functions
        // Math() no va
        "no-obj-calls": "error",
        // disallow use of Object.prototypes builtins directly
        // http://eslint.org/docs/rules/no-prototype-builtins
        // OJO que el Object puede no tener las properties de prototype
        "no-prototype-builtins": "error",
        // disallow multiple spaces in a regular expression literal
        "no-regex-spaces": "error",
        // disallow sparse arrays. Error prone
        "no-sparse-arrays": "error",
        // Disallow template literal placeholder syntax in regular strings
        // http://eslint.org/docs/rules/no-template-curly-in-string
        // Es un error si no usa ` en ES6
        "no-template-curly-in-string": "error",
        // Avoid code that looks like two expressions but is actually one
        // http://eslint.org/docs/rules/no-unexpected-multiline
        "no-unexpected-multiline": "error",
        // disallow unreachable statements after a return, throw, continue, or break statement
        "no-unreachable": "error",
        // disallow return/throw/break/continue inside finally blocks
        // http://eslint.org/docs/rules/no-unsafe-finally
        "no-unsafe-finally": "error",
        // disallow negating the left operand of relational operators
        // http://eslint.org/docs/rules/no-unsafe-negation
        "no-unsafe-negation": "error",
        // disallow negation of the left operand of an in expression
        // deprecated in favor of no-unsafe-negation
        "no-negated-in-lhs": "off",
        // disallow comparisons with the value NaN
        "use-isnan": "error",
        // ensure JSDoc comments are valid
        // http://eslint.org/docs/rules/valid-jsdoc
        "valid-jsdoc": "off",
        // ensure that the results of typeof are compared against a valid string
        // http://eslint.org/docs/rules/valid-typeof
        "valid-typeof": ["error", { "requireStringLiterals": true }],
        // ******************************    Stylistic Issues
        // enforce spacing inside array brackets
        // Tiene --fix
        "array-bracket-spacing": ["error", "never"],
        // enforce spacing inside single-line blocks
        // http://eslint.org/docs/rules/block-spacing
        "block-spacing": ["warn", "always"],
        // enforce one true brace style ( Java like )
        "brace-style": ["error", "1tbs", { "allowSingleLine": false }],
        // require camel case names, everywhere
        "camelcase": ["error", { "properties": "always" }],
        // allow trailing commas only in multiline object literals
        // Tiene --fix
        "comma-dangle": ["error", "only-multiline"],
        // enforce spacing before and after comma
        // Tiene --fix
        "comma-spacing": ["error", { "before": false, "after": true }],
        // enforce one true comma style
        // Ignoro VariableDeclaration xq eso lo resuelvo con otra regla
        // --fix
        "comma-style": ["error", "last", { "exceptions": { "VariableDeclaration": true} }],
        // disallow padding inside computed properties
        // Tiene --fix
        "computed-property-spacing": ["error", "never"],
        // enforces consistent naming when capturing the current execution context
        "consistent-this": ["warn", "self"],
        // enforce newline at the end of file, with no multiple empty lines
        // Tiene --fix
        "eol-last": ["error"],
        // enforce spacing between functions and their invocations
        // http://eslint.org/docs/rules/func-call-spacing
        // Tiene --fix
        "func-call-spacing": ["error", "never"],
        // require function expressions to have a name
        "func-names": "off",
        // enforces use of function declarations or expressions
        // http://eslint.org/docs/rules/func-style
        "func-style": ["warn", "declaration"],
        // Blacklist certain identifiers to prevent them being used
        // http://eslint.org/docs/rules/id-blacklist
        "id-blacklist": ["error", "pepe", "pp", "moco"],
        // this option enforces minimum and maximum identifier lengths
        // (variable names, property names etc.)
        "id-length": "off",
        // require identifiers to match the provided regular expression
        "id-match": "off",
        // this option sets a specific tab width for your code
        // http://eslint.org/docs/rules/indent
        // Tiene --fix
        "indent": ["error", 2, { "SwitchCase": 1, "VariableDeclarator": 1, "outerIIFEBody": 1 }],
        // specify whether double or single quotes should be used in JSX attributes
        // http://eslint.org/docs/rules/jsx-quotes
        "jsx-quotes": ["off", "prefer-double"],
        // enforces spacing between keys and values in object literal properties
        // Tiene --fix
        // off porque el --fix no anda
        "key-spacing": ["off", { "beforeColon": false, "afterColon": true }],
        // require a space before & after certain keywords
        // Tiene --fix
        "keyword-spacing": ["error", {
          "before": true,
          "after": true,
          "overrides": {
            "return": { "after": true },
            "throw": { "after": true },
            "case": { "after": true }
          }
        }],
        // enforce position of line comments
        // http://eslint.org/docs/rules/line-comment-position
        // TODO: enable?
        "line-comment-position": ["off", {
          "position": "above",
          "ignorePattern": "",
          "applyDefaultPatterns": true
        }],
        // disallow mixed "LF" and "CRLF" as linebreaks
        // http://eslint.org/docs/rules/linebreak-style
        // Mezcla de estilos rompe los diffs porque genera diferencias que no son reales
        "linebreak-style": ["error", "unix"],
        // enforces empty lines around comments
        "lines-around-comment": "off",
        // require or disallow newlines around directives
        // http://eslint.org/docs/rules/lines-around-directive
        // Tiene --fix
        // No corre, creo que problema de versión
        "lines-around-directive": ["off", {
          "before": "always",
          "after": "always"
        }],
        // specify the maximum depth that blocks can be nested
        "max-depth": ["off", 4],
        // specify the maximum length of a line in your program
        // http://eslint.org/docs/rules/max-len
        "max-len": ["warn", 120, 2, {
          "ignoreUrls": true,
          "ignoreComments": false,
          "ignoreStrings": true,
          "ignoreTemplateLiterals": true
        }],
        // specify the max number of lines in a file
        // http://eslint.org/docs/rules/max-lines
        "max-lines": ["off", {
          "max": 300,
          "skipBlankLines": true,
          "skipComments": true
        }],
        // specify the maximum depth callbacks can be nested
        "max-nested-callbacks": "off",
        // limits the number of parameters that can be used in the function declaration.
        "max-params": ["off", 3],
        // specify the maximum number of statement allowed in a function
        "max-statements": ["off", 10],
        // restrict the number of statements per line
        // http://eslint.org/docs/rules/max-statements-per-line
        "max-statements-per-line": ["off", { "max": 1 }],
        // require multiline ternary
        // http://eslint.org/docs/rules/multiline-ternary
        // TODO: enable?
        "multiline-ternary": ["off", "never"],
        // require a capital letter for constructors
        "new-cap": ["error", {
          "newIsCap": true,
          "newIsCapExceptions": [],
          "capIsNew": false,
          "capIsNewExceptions": ["Immutable.Map", "Immutable.Set", "Immutable.List"]
        }],
        // disallow the omission of parentheses when invoking a constructor with no arguments
        // http://eslint.org/docs/rules/new-parens
        // Probablemente un error
        "new-parens": "error",
        // allow/disallow an empty newline after var statement
        "newline-after-var": "off",
        // http://eslint.org/docs/rules/newline-before-return
        "newline-before-return": "off",
        // enforces new line after each method call in the chain to make it
        // more readable and easy to maintain
        // http://eslint.org/docs/rules/newline-per-chained-call
        "newline-per-chained-call": ["error", { "ignoreChainWithDepth": 4 }],
        // disallow use of the Array constructor
        "no-array-constructor": "error",
        // disallow use of bitwise operators
        // http://eslint.org/docs/rules/no-bitwise
        "no-bitwise": "error",
        // disallow use of the continue statement
        // http://eslint.org/docs/rules/no-continue
        "no-continue": "off",
        // disallow comments inline after code
        "no-inline-comments": "off",
        // disallow if as the only statement in an else block
        // http://eslint.org/docs/rules/no-lonely-if
        // usar else if, no else { if }
        "no-lonely-if": "error",
        // disallow un-paren"d mixes of different operators
        // http://eslint.org/docs/rules/no-mixed-operators
        "no-mixed-operators": ["off", {
          "groups": [
            ["+", "-", "*", "/", "%", "**"],
            ["&", "|", "^", "~", "<<", ">>", ">>>"],
            ["==", "!=", "===", "!==", ">", ">=", "<", "<="],
            ["&&", "||"],
            ["in", "instanceof"]
          ],
          "allowSamePrecedence": true
        }],

        // disallow mixed spaces and tabs for indentation
        // Habilitar cuando definamos el no-tab one and for all
        "no-mixed-spaces-and-tabs": "error",

        // disallow multiple empty lines and only one newline at the end
        "no-multiple-empty-lines": ["off", { "max": 2, "maxEOF": 1 }],

        // disallow negated conditions
        // http://eslint.org/docs/rules/no-negated-condition
        "no-negated-condition": "off",

        // disallow nested ternary expressions
        "no-nested-ternary": "warn",

        // disallow use of the Object constructor
        "no-new-object": "error",

        // disallow use of unary operators, ++ and --
        // http://eslint.org/docs/rules/no-plusplus
        // It's nice
        "no-plusplus": "off",

        // disallow certain syntax forms
        // http://eslint.org/docs/rules/no-restricted-syntax
        "no-restricted-syntax": [
          "error",
          "ForInStatement",
          "LabeledStatement",
          "WithStatement"
        ],

        // disallow space between function identifier and application
        "no-spaced-func": "off",

        // disallow tab characters entirely
        "no-tabs": "error",

        // disallow the use of ternary operators
        "no-ternary": "off",

        // disallow trailing whitespace at the end of lines
        // --fix
        "no-trailing-spaces": "error",

        // disallow dangling underscores in identifiers
        // algunas libs definen propiedades de esta forma
        "no-underscore-dangle": ["off", { "allowAfterThis": false }],

        // disallow the use of Boolean literals in conditional expressions
        // also, prefer `a || b` over `a ? a : b`
        // http://eslint.org/docs/rules/no-unneeded-ternary
        "no-unneeded-ternary": ["warn", { "defaultAssignment": false }],

        // disallow whitespace before properties
        // http://eslint.org/docs/rules/no-whitespace-before-property
        // Tiene --fix
        "no-whitespace-before-property": "error",

        // require padding inside curly braces
        "object-curly-spacing": ["off", "never"],

        // enforce line breaks between braces
        // http://eslint.org/docs/rules/object-curly-newline
        // TODO: enable once https://github.com/eslint/eslint/issues/6488 is resolved
        "object-curly-newline": ["off", {
          "ObjectExpression": { "minProperties": 0, "multiline": true },
          "ObjectPattern": { "minProperties": 0, "multiline": true }
        }],

        // enforce "same line" or "multiple line" on object properties.
        // http://eslint.org/docs/rules/object-property-newline
        "object-property-newline": ["off", {
          "allowMultiplePropertiesPerLine": true
        }],

        // allow just one var statement per function
        "one-var": ["off", "never"],

        // require a newline around variable declaration
        // http://eslint.org/docs/rules/one-var-declaration-per-line
        "one-var-declaration-per-line": ["off", "always"],

        // require assignment operator shorthand where possible or prohibit it entirely
        // http://eslint.org/docs/rules/operator-assignment
        "operator-assignment": ["off", "always"],

        // enforce operators to be placed before or after line breaks
        "operator-linebreak": ["error", "before"],

        // enforce padding within blocks
        "padded-blocks": ["off", "never"],

        // require quotes around object literal property names
        // http://eslint.org/docs/rules/quote-props.html
        // Tiene --fix
        // TODO Deshabilitado porque el --fix no anda
        "quote-props": ["error", "as-needed", { "keywords": false, "unnecessary": true, "numbers": false }],

        // specify whether double or single quotes should be used
        // Tiene --fix
        "quotes": ["error", "single", { "avoidEscape": true }],

        // do not require jsdoc
        // http://eslint.org/docs/rules/require-jsdoc
        "require-jsdoc": "off",

        // require or disallow use of semicolons instead of ASI
        // Tiene --fix
        "semi": ["error", "always"],

        // enforce spacing before and after semicolons
        // Tiene --fix
        "semi-spacing": ["error", { "before": false, "after": true }],

        // requires object keys to be sorted
        "sort-keys": ["off", "asc", { "caseSensitive": false, "natural": true }],

        // sort variables within the same declaration block
        "sort-vars": "off",

        // require or disallow space before blocks
        // Tiene --fix
        "space-before-blocks": "error",

        // require or disallow space before function opening parenthesis
        // http://eslint.org/docs/rules/space-before-function-paren
        // Tiene --fix
        "space-before-function-paren": ["error", { "anonymous": "always", "named": "never" }],

        // require or disallow spaces inside parentheses
        "space-in-parens": ["off", "never"],

        // require spaces around operators
        // Tiene --fix
        "space-infix-ops": "error",

        // Require or disallow spaces before/after unary operators
        // http://eslint.org/docs/rules/space-unary-ops
        // Tiene --fix
        "space-unary-ops": ["error", {
          "words": true,
          "nonwords": false,
          "overrides": {
          }
        }],

        // require or disallow a space immediately following the // or /* in a comment
        // Tiene --fix
        "spaced-comment": ["error", "always", {
          "exceptions": ["-", "+"],
          "markers": ["=", "!"]           // space here to support sprockets directives
        }],

        // require or disallow the Unicode Byte Order Mark
        // http://eslint.org/docs/rules/unicode-bom
        // Usamos UTF-8, así que un BOM es algo raro, probablemene agregado por un editor
        "unicode-bom": ["error", "never"],

        // require regex literals to be wrapped in parentheses
        "wrap-regex": "off",

        // *********************   Variables

        // enforce or disallow variable initializations at definition
        "init-declarations": "off",

        // disallow the catch clause parameter name being the same as a variable in the outer scope
        "no-catch-shadow": "off",

        // disallow deletion of variables
        "no-delete-var": "error",

        // disallow labels that share a name with a variable
        // http://eslint.org/docs/rules/no-label-var
        "no-label-var": "error",

        // disallow specific globals
        "no-restricted-globals": "off",

        // disallow declaration of variables already declared in the outer scope
        // controversial
        "no-shadow": "warn",

        // disallow shadowing of names such as arguments
        "no-shadow-restricted-names": "error",

        // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef": "error",

        // disallow use of undefined when initializing variables
        // http://eslint.org/docs/rules/no-undef-init
        "no-undef-init": "error",

        // disallow use of undefined variable
        // http://eslint.org/docs/rules/no-undefined
        // Referirse directamente a undefined como var es en general error-prone
        "no-undefined": "error",

        // disallow declaration of variables that are not used in the code
        // No dejar mugre tirada
        "no-unused-vars": ["error", { "vars": "local", "args": "none" }],

        // disallow use of variables before they are defined
        // Deshabilitada xq a veces declaramos funciones al final del script
        "no-use-before-define": "off"
    },

  "env": {
            "browser": true
        },

  "globals": {
        "ionic": false,
        "cordova": false,
        "angular": false
    }
}
